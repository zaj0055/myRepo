#include <stdio.h>
#include <string.h>
#include <malloc.h>
#define M 20

#define max_stack_size 100
typedef struct
{
	char data[20];	
	int top;
	int base;
	int length;
}Stack;//定义一个操作符栈
typedef struct
{
	float data[20];
	int top;
	int base;
	int length;
}Stack2;//定义一个操作数栈
bool isfull(Stack *st )
{
	if(st->length >= 20)
		return true;
	else 
	    return false;

}//判断操作符栈满
bool isfull2(Stack2 *st )
{
	if(st->length >= 20)
		return true;
	else 
	    return false;

}//判断操作数栈满
bool isempty(Stack *st)
{
	if(st->length <= 0)
		return true;
	else 
		return false;
}//判断操作符栈空

bool isempty2(Stack2 *st)
{
	if(st->length <= 0)
		return true;
	else 
		return false;
}//判断操作数栈空

void push(char c,Stack *st)//操作符入栈//参数是怎么设置的，为什么是这两个？
{

   int position;
   if(isfull(st))
   {
	   printf("栈满\n");
   }
   else
   {
	   position=st->top;//获取位置
	   st->data[position]=c;//存入数据
	   st->top++;//改变位置
	   st->length++;//
   }
}

void push2(float f,Stack2 *st)//操作数入栈
{

   int position;
   if(isfull2(st))
   {
	   printf("栈满\n");
   }
   else
   {
	   position=st->top;//获取位置
	   st->data[position]=f;//存入数据
	   st->top++;//改变位置
	   st->length++;//
   }
}

//字符出栈
char pop(Stack *st)
{
   int position;
   char c;
   if(isempty(st))
   {
	   printf("栈为空\n");
	   return '\0';
   }
   else
   position=st->top-1;//为什么是top-1呀？
   c=st->data[position];
   st->top--;
   st->length--;
   st->data[position]='\0';//清除数据
   return c;
}
//操作数出栈
float  pop2(Stack2 *st)
{
   int position;
   float c;
   if(isempty2(st))
   {
	   printf("栈为空\n");
	   return '\0';
   }
   else
   position=st->top-1;
   c=st->data[position];
   st->top--;
   st->length--;
   st->data[position]=0;//清楚数据
   return c;
}
int detect(char temp)
{
	int i=0;
	char optr[7]={'+','-','*','/','(',')','#'};
	for(i=0;i<7;i++)
	{
		if(temp==optr[i])
			return i;
	}
}

char pri(char temp,char optr)
{
	int row,col;
	char priorty[7][7]={/**//* + - * / ( ) # */
		{'<','<','<','<','>','>','>'}, 
		{'<','<','<','<','>','>','>'}, 
		{'>','>','<','<','>','>','>'}, 
		{'>','>','<','<','>','>','>'}, 
		{'>','>','>','>','>','=','>'}, 
		{'<','<','<','<','=','0','>'}, 
		{'<','<','<','<','>','>','='}, 
	};
	row=detect(optr);
	col=detect(temp);
	return priorty[row][col];
}//返回值是对应的＞＜等符号

Stack * createStack()
{
	Stack *st = (Stack *)malloc(sizeof(Stack));//创建操作符栈并给它分配存储空间
	st->top = st->base = 0;
	st->length = 0;
	memset(st->data,0,20);
	return st;
}

Stack2 * createStack2()
{
	Stack2 *st = (Stack2 *)malloc(sizeof(Stack2));
	st->top = st->base = 0;
	st->length = 0;
	memset(st->data,0,20 * sizeof(float));
	return st;
}

bool isOpt(char opt)
{
	char optr[7]={'+','-','*','/','(',')','#'};
	for(int i=0;i<7;i++)
		if(optr[i] == opt)
			return true;
	return false;
}//查找操作符

float Calculate(float par1,float par2,char opt)
{
	switch(opt)
	{
	case '+':
		return (par1 + par2);
	case '-':
		return (par1 - par2);
	case '*':
		return (par1 * par2);
	case '/' :
		if(par2 == 0)
		{
			printf("除数不能为0\n");
			return 0;
		}
		else
		    return (par1 / par2);
	default :
		printf("错误的操作符\n");
		return 0;
	}
}//对操作数进行基本数学计算

char ReadStack(Stack *st)
{
   int position;
   float c;
   if(isempty(st))
   {
	   printf("栈为空\n");
	   return '\0';
   }
   else
   position=st->top-1;
   c=st->data[position]; 
  
   return c;
}	//这个是干嘛的啊？
void main()
{
	char optTmp = '#';//首先压入操作符栈的是#
	Stack *optSt;
	Stack2 *paramSt;
    paramSt = createStack2();
	optSt = createStack();//不知道这个是怎么申明的？为什么这么申明
	push('#',optSt);
	char str[100];
	char set,j;
	int num[20];
	int s[20];	
	printf("请输入您要输入的表达式:\n");
	gets(str);
	int i;
	char number[10];
	memset(number,0,10);
	int currentNumPosition = 0;
	for(i=0;i<strlen(str);i++)
	{
		if(isOpt(str[i]))
		{		
			memset(number,0,10);
			currentNumPosition = 0;

			if(pri(optTmp,str[i]) == '>')
			{
				push(str[i],optSt);
				optTmp = str[i];
			}
			else if(pri(optTmp,str[i]) == '<')
			{
				float par1 = pop2(paramSt);
				float par2 = pop2(paramSt);//两个操作数出栈，当当前操作符比栈顶的优先级小时执行
				char opt = pop(optSt);//操作符出栈
				float result = Calculate(par2,par1,opt);//调用函数
				push2(result,paramSt);//每步运算结果入栈
			    optTmp = ReadStack(optSt);//
				i--;
			}
			else
			{
				pop(optSt);
				optTmp = ReadStack(optSt);//不明白哦~
			}

		}	
		else
		{
			number[currentNumPosition] = str[i];
			int num=0;
			if(isOpt(str[i+1]))
			{				
				int power = 1;
				for(int j=currentNumPosition;j>=0;j-- )
				{
					num += (number[j] - '0')*power;
					power *=10;
				}
				push2((float)num,paramSt);//假设操作数的位数是几位数以上的情况
			}
		}

	}
	
	printf("运算结果是%f\n",pop2(paramSt));
	
}
